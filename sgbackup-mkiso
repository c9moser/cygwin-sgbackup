#!/bin/sh

# (C) 2021,2022 Christian Moser
# LICENSE: Public Domain
# VERSION 0.2.0

SG_ROOT_DIR=${0%/sgbackup-mkiso}

BACKUPDIR="${HOME}/backup/SaveGames"
SG_ISO_TEMP="/tmp/`whoami`.sgbackup.`date +%Y%m%d`"
SG_ISO_FILE="/tmp/`whoami`.sgbackup.`date +%Y%m%d`.iso"
SG_ISO_NAME="SAVEGAMES"

SG_CONF_DIR="${SG_ROOT_DIR}/sgbackup.config"
SG_SCRIPT_DIR="${SG_ROOT_DIR}/sgbackup.scripts"

# Check for configuration
if [ -f /etc/sgbackup.conf ]; then
	source /etc/sgbackup.conf
fi

if [ -f /usr/local/etc/sgbackup.conf ]; then
	source /usr/local/etc/sgbackup.conf
fi

if [ -f "${HOME}/.sgbackup.conf" ]; then
	source "${HOME}/.sgbackup.conf"
fi

SG_USER_CONF_DIR="${HOME}/.sgbackup.config"
SG_LIST="/tmp/`whoami`.sgbackup-mkiso.lst"

sg_iso_conf_dir="${SG_ISO_TEMP}/sgconf"
sg_iso_dir="SaveGames"

sg_print_help() {
	echo "USAGE"
	echo "====="
	echo "  sgbackup-mkiso -h"
	echo "  sgbackup [-o file]"
	echo ""
	echo "DESCRIPTION"
	echo "==========="
	echo "  -h       print help"
	echo "  -o file  output to file"
}

# parse options
args=`getopt ho: $*`
if [ $? -ne 0 ]; then
	sg_print_help
	exit 1
fi
set -- $args

while :; do
	case $1 in
		-h)
			sg_print_help
			shift
			exit
			;;
		-o)
			SG_ISO_FILE="$2"
			shift;shift
			;;
		--)
			shift
			break
			;;
		*)
			echo "UNKNOWN OPTION $1" >&2
			sg_print_help
			exit 1
			;;
	esac
done

if [ ! -d "${SG_ISO_TEMP}/${sg_iso_dir}" ]; then
	mkdir -pv "${SG_ISO_TEMP}/${sg_iso_dir}"
fi

if [ ! -d "${sg_iso_conf_dir}" ]; then
	mkdir -pv "${sg_iso_conf_dir}"
fi
if [ -f "${SG_LIST}" ]; then
	rm -v ${SG_LIST}
fi

for i in "${SG_USER_CONF_DIR}"/*.conf; do
	conf="${i#${SG_USER_CONF_DIR}/}"
	sgid="${conf%.conf}"
	echo "$sgid" >> "${SG_LIST}"
done
for i in ${SG_CONF_DIR}/*.conf; do
	conf="${i#${SG_CONF_DIR}/}"
	sgid="${conf%.conf}"

	if [ "`cat $SG_LIST | grep -x $sgid`" = "$sgid" ]; then
		continue
	fi
	echo "${sgid}" >> "$SG_LIST"
done

pwdir="`pwd`"

for i in `cat ${SG_LIST} | sort`; do
	if [ -f "${SG_USER_CONF_DIR}/${i}.conf" ]; then
		source "${SG_USER_CONF_DIR}/${i}.conf"
		userconf="YES"
	elif [ -f "${SG_CONF_DIR}/${i}.conf" ]; then
		source "${SG_CONF_DIR}/${i}.conf"
		userconf="NO"
	else
		echo "NO CONFIGURATION FOR \"${i}\" FOUND!" >&2
		continue
	fi

	if [ -f "${BACKUPDIR}/${SGNAME}.tar.xz" ]; then
		file="${SGNAME}.tar.xz"
		if [ -f "${BACKUPDIR}/${file}.sha256" ]; then
			cd "${BACKUPDIR}"
			sha256sum -c ${file}.sha256
			if [ $? -ne 0 ]; then
				cd "${pwdir}"
				echo "Checksum for file \"${f}\" not ok!" >&2
				continue
			fi
			cp -v "${BACKUPDIR}/${file}.sha256" "${SG_ISO_TEMP}/${sg_iso_dir}/${file}.sha256"
			cd "${pwdir}"
		fi
		cp -v "${BACKUPDIR}/${file}" "${SG_ISO_TEMP}/${sg_iso_dir}/${file}"
	elif [ -f "${BACKUP_DIR}/${SGNAME}/${SGNAME}.latest.tar.xz" ]; then
		file="${SGNAME}.latest.tar.xz"
		if [ -f "${BACKUPDIR}/${SGNAME}/${file}.sha256" ]; then
			cd "${BACKUPDIR}/${SGNAME}"
			sha256sum -c "${file}.sha256"
			if [ $? -ne 0 ]; then
				echo "Checksum for file \"${file}\" not ok!" >&2
				cd "${pwdir}"
				continue
			fi
			cd "${pwdir}"
			cp -vL "${BACKUP_DIR}/${SGNAME}/${file}.sha256" "${SG_ISO_TEMP}/${sg_iso_dir}/${SGNAME}.tar.xz.sha256"
		fi
		cp -vL "${BACKUP_DIR}/${SGNAME}/${file}" "${SG_ISO_TEMP}/${sg_iso_dir}/${SGNAME}.tar.xz"
	else
		for f in `ls "${BACKUPDIR}/${SGNAME}/${SGNAME}".*.tar.xz | sort -r`; do
			file=${f#${BACKUPDIR}/${SGNAME}/}
			if [ -f "${f}.sha256" ]; then
				cd "${BACKUPDIR}/${SGNAME}"
				sha256sum -c "${file}.sha256"
				if [ $? -ne 0 ]; then
					echo "Ckesum for file \"$file\" not ok!" >&2
					cd "${pwdir}"
					continue
				fi
				cd "${pwdir}"
				cp -v "${f}.sha256" "${SG_ISO_TEMP}/${sg_iso_dir}/${SGNAME}.tar.xz.sha256"
			fi
			cp -v "${f}" "${SG_ISO_TEMP}/${sg_iso_dir}/${SGNAME}.tar.xz"
			break
		done
	fi

	if [ "$userconf" = "YES" ]; then
		cp -v "${SG_USER_CONF_DIR}/${i}.conf" "${sg_iso_conf_dir}/${i}.conf"
	else
		cp -v "${SG_CONF_DIR}/${i}.conf" "${sg_iso_conf_dir}/${i}.conf"
	fi
done

cp -v "${SG_SCRIPT_DIR}/sgrestore.sh" "${SG_ISO_TEMP}/sgrestore.sh" \
	&& chmod -v ugo+rx "${SG_ISO_TEMP}/sgrestore.sh"

mkisofs -J -R -l -udf -iso-level 4 -V "${SG_ISO_NAME}" -o "${SG_ISO_FILE}" "${SG_ISO_TEMP}"

rm -v "${SG_LIST}"
rm -Rv "${SG_ISO_TEMP}"

