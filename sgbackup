#!/bin/sh

# (C) 2021, Christian Moser
# License: Public Domain


BACKUPDIR="${HOME}/backup/SaveGames"
MAX_BACKUP=14
SG_CONF_DIR="${0}.config"
SG_USER_CONF_DIR="${HOME}/.sgbackup.config"

# LOAD configuration files
if [ -f /etc/sgbackup.conf ]; then
	source /etc/sgbackup.conf
fi

if [ -f /usr/local/etc/sgbackup.conf ]; then
	source /usr/local/etc/sgbackup.conf
fi

if [ -f "${HOME}/.sgbackup.conf" ]; then
	source "${HOME}/.sgbackup.conf"
fi

sg_backup_mode="c"
sg_start_datetime="`date \"+%d.%m.%Y at %H:%M:%S\"`"
sg_start="`date +%s`"

sg_backup() {
	sgid="$1"

	if [ -f "${SG_USER_CONF_DIR}/${sgid}.conf" ];then
		source "${SG_USER_CONF_DIR}/${sgid}.conf"
	elif [ -f "${SG_CONF_DIR}/${sgid}.conf" ]; then
		source "${SG_CONF_DIR}/${sgid}.conf"
	else
		echo "No savegame config for '$1' found!" >&2
		return 1
	fi

	echo "----> Backing up: \"${NAME}\" <----"
	
	if [ ! -d "${BACKUPDIR}/${SGNAME}" ]; then
		mkdir "${BACKUPDIR}/${SGNAME}"
	fi
	file="${BACKUPDIR}/${SGNAME}/${SGNAME}.`date +%Y%m%d-%H%M%S`.tar.xz"
	tar -cJvf "$file" -C "$SGROOT" "$SGDIR"

	pwdir="`pwd`"
	cd "${BACKUPDIR}/${SGNAME}"
	latest="${file#${BACKUPDIR}/${SGNAME}/}"
	sha256sum -b --tag "$latest" > "${latest}.sha256"
	ln -snfv "${latest}" "${SGNAME}.latest.tar.xz"
	ln -snfv "${latest}.sha256" "${SGNAME}.latest.tar.xz.sha256"
	cd "$pwdir"

	count=0
	if [ $MAX_BACKUP -gt 0 ]; then
		for i in `ls "${BACKUPDIR}/${SGNAME}/${SGNAME}".*.tar.xz | sort -r`; do
			if [ "${i#${BACKUPDIR}/${SGNAME}/}" != "${SGNAME}.latest.tar.xz" ]; then
				count=$(($count + 1))
				if [ $count -gt $MAX_BACKUP ]; then
					rm "$i"
				fi
			fi
		done
	fi
}

sg_final_backup() {
	sgid="$1"
	userconf="${SG_USER_CONF_DIR}/${sgid}.conf"
	pwdir="`pwd`"

	if [ -f "${userconf}" ]; then
		source "${userconf}"
		conf="${userconf}"
	elif [ -f ${SG_CONF_DIR}/${sgid}.conf ]; then
		source "${SG_CONF_DIR}/${sgid}.conf"
		conf="${SG_CONF_DIR}/${sgid}.conf"
	else
		echo "No savegame-configuration for '$sgid' found!" >&2
		return 1
	fi
	
	file="${BACKUPDIR}/${SGNAME}.tar.xz"

	echo "----> Backing up: \"${NAME}\" <----"

	tar -cJvf "$file" -C "$SGROOT" "$SGDIR"
	cd "${BACKUPDIR}"
	sha256sum -b --tag "${SGNAME}.tar.xz" > "${SGNAME}.tar.xz.sha256"
	cd "$pwdir"

	if [ ! -d "${SG_USER_CONF_DIR}" ]; then
		mkdir -p -v "${SG_USER_CONF_DIR}"
	fi

	if [ "${conf}" = "${userconf}" ]; then
		if [ "x`cat ${conf} | grep SG_NO_AUTO`" = "x" ]; then
			echo 'SG_NO_AUTO="YES"' >> $conf
		elif [ "SG_NO_AUTO=\"YES\"" = "`cat ${conf} | grep SG_NO_AUTO`" ];then
			echo "SG_NO_AUTO already configured!"
		elif [ 'SG_NO_AUTO="NO"' = "`cat ${conf} | grep SG_NO_AUTO`" ]; then
			sed -e s/'SG_NO_AUTO="NO"'/'SG_NO_AUTO="YES"'/ >> "${conf}.tmp"
			rm -v "$conf"
			mv -v "${conf}.tmp" "$conf"
		else
			echo 'SG_NO_AUTO="YES"' >> "$conf"
		fi
	else
		echo "Writing $userconf"
		cp "$conf" "${userconf}"
		echo "SG_NO_AUTO=\"YES\"" >> "${userconf}"
	fi
}

sg_delete_backups() {
	name="$1"
	sgname="$2"

	echo "----> Deleting Savegame Backups: \"${name}\" <----"

	for i in "${BACKUPDIR}/${sgname}/${sgname}".*.tar.xz; do
		rm -v "$i"
		rmdir -v ${BACKUPDIR}/${sgname}
	done
}

sg_delete_savegames() {
	name="$1"
	sgname="$2"
	sgroot="$3"
	sgdir="$4"

	echo "----> Deleting Savegames \"${name}\" <----"

	rm -rv "${sgroot}/${sgdir}"/*
}

sg_list() {
	for i in "${SG_CONF_DIR}"/*.conf; do
		conf=${i#${SG_CONF_DIR}/}
		sgname="${conf%.conf}"
		NAME=""
		source "$i"
		if [ "x$NAME" = "x" ]; then
			NAME="$SGNAME"
		fi
		if [ ${#sgname} -lt 8 ]; then
			indent="			"
		elif [ ${#sgname} -lt 16 ]; then
			indent="		"
		elif [ ${#sgname} -lt 24 ]; then
			indent="	"
		else
			indent=" "
		fi

		echo "${sgname}${indent}${NAME}"
	done
}

sg_restore() {
	name="$1"
	sgname="$2"
	sgroot="$3"

	if [ -f "${BACKUPDIR}/${sgname}.tar.xz" ]; then
		file="${BACKUPDIR}/${sgname}.tar.xz"
	else
		for i in `ls "${BACKUPDIR}/${sgname}/${sgname}".*.tar.xz | sort -r`; do
			file="$i"
			break
		done
	fi
	if [ ! $file ]; then
		echo "No backup for 'SGNAME' found!" >&2
	else
		echo "----> Restoring savegames for: \"${name}\" <----"
		tar -xJvf "$file" -C "$sgroot"
	fi
}

sg_print_help() {
	echo USAGE
	echo =====
	echo "  sgbackup [-a|-r|-R]"
	echo "  sgbackup [-c|-d|-D|-f|-n|-r] args ..."
	echo "  sgbackup -h"
	echo "  sgbackup -l"
	echo 
	echo "Description"
	echo "==========="
	echo "  -a        Backup all save-games"
	echo "  -c        Backup save-game [default]"
	echo "  -d        Delete Save games"
	echo "  -D        Delete save game backups"
	echo "  -f        Final backup of save games"
	echo "  -h        Print help"
	echo "  -l        List installed save games"
	echo "  -n        Show full name of the game"
	echo "  -r        Restore latest save game 'name'"
	echo "  -R        Restore all save games"
	echo
	echo '${name}.conf VARIABLES'
	echo "======================"
	echo "  NAME        Name of the Game"
	echo "  SGNAME      Name of the SaveGame file"
	echo "  SGROOT      Save Games root directory"
	echo "  SGDIR       Save Games directory"
	echo "  SG_NO_AUTO  Set to \"YES\" if you want to exclude"
	echo "              saves from '-a' backup." 
}

sg_print_name() {
	sgconf="${SG_CONF_DIR}/${1}.conf"
	if [ ! -f "${sgconf}" ]; then
		echo "No configuration for '$1' found!" >&2
		return
	fi
	source "$sgconf"
	if [ ${#1} -lt 8 ]; then
		indent="			"
	elif [ ${#1} -lt 16 ]; then
		indent="		"
	elif [ ${#1} -lt 24 ]; then
		indent="	"
	else
		indent=" "
	fi
	echo "${1}${indent}${NAME}"
}

sg_runtime() {
	runtime=$(( `date +%s` - sg_start ))
	hours=$(( $runtime / 3600 ))
	minutes=$(( ( $runtime % 3600 ) / 60 ))
	seconds=$(( ( $runtime % 3600 ) % 60 ))

	[[ ${#hours} -eq 1 ]] && hours="0${hours}"
	[[ ${#minutes} -eq 1 ]] && minutes="0${minutes}"
	[[ ${#seconds} -eq 1 ]] && seconds="0${seconds}"
	echo "'sgbackup' finihsed in ${hours}:${minutes}:${seconds}"
}

# if no arguments are passed form the command line 
# print help and exit
if [ $# -eq 0 ]; then
	sg_print_help
	exit
fi

# parse args
args=`getopt acdDfhlnrR $*`
if [ $? -ne 0 ]; then
	sg_print_help
	exit 1
fi
set -- $args

while :; do
	case $1 in
		-a)
			sg_backup_mode="a"
			shift
			;;
		-c)
			sg_backup_mode="c"
			shift
			;;
		-d) 
			sg_backup_mode="d"
			shift
			;;
		-D)
			sg_backup_mode="D"
			shift
			;;
		-r)
			sg_backup_mode="r"
			shift
			;;
		-R)	
			sg_backup_modr="R"
			shift
			;;
		-f)
			sg_backup_mode="f"
			shift
			;;
		-h)
			sg_print_help
			shift
			exit
			;;
		-l)
			sg_list
			shift
			exit
			;;
		-n)
			sg_backup_mode="n"
			shift
			;;
		--)
			shift
			break
			;;
		*)
			echo "Unknown flag $1" >&2
			exit 1
			;;
	
	esac
done

# create $BACKUPDIR if it does not exist
if [ ! -d "${BACKUPDIR}" ]; then
	mkdir -p "${BACKUPDIR}"
fi

case $sg_backup_mode in
	a)
		echo "Backup started on: $sg_start_datetime."
		sglist="/tmp/`whoami`.sgbackup.lst"
		if [ -f "$sglist" ]; then
			rm "$sglist"
		fi

		if [ -d "$SG_USER_CONF_DIR" ]; then
			for i in "${SG_USER_CONF_DIR}/"*.conf; do
				SG_NO_AUTO="NO"
				source ${i}
				if [ "$SG_NO_AUTO" = "YES" ]; then
					auto="NO"
				else
					auto="YES"
				fi
				conf=${i#${SG_USER_CONF_DIR}/}
				echo "${conf%.conf}:${auto}" >> "$sglist"
			done
		fi
		for i in "${SG_CONF_DIR}"/*.conf; do
			conf=${i#${SG_CONF_DIR}/}
			sgid=${conf%.conf}

			if [ "`cat ${sglist} | grep $sgid: | cut -d: -f1`" = "$sgid" ]; then
				continue
			fi

			SG_NO_AUTO="NO"
			source "$i"
			if [ "$SG_NO_AUTO" = "YES" ]; then
				auto="NO"
			else
				auto="YES"
			fi
			echo "${sgid}:${auto}" >> "$sglist"
		done
		for i in `cat $sglist | sort`; do
			sgid="`echo $i | cut -d: -f1`"
			auto="`echo $i | cut -d: -f2`"
			if [ "$auto" = "YES" ]; then
				sg_backup "$sgid"
			fi
		done

		rm -v "${sglist}"
		sg_runtime
		exit
		;;
	c)
		if [ $# -eq 0 ]; then
			echo "MISSING ARGUMENTS!" >&2
			sg_print_help
			exit 1
		fi

		echo "Backup started on: $sg_start_datetime."
		while [ $# -gt 0 ]; do
			sg_backup "$1"
			shift
		done
		sg_runtime
		;;
	d)
		if [ $# -eq 0 ]; then
			echo "MISSING ARGUMENTS!" >&2
			sg_print_help
			exit 1
		fi
		while [ $# -gt 0 ]; do
			conf="${SG_CONF_DIR}/${1}.conf"
			if [ ! -f "${conf}" ]; then
				echo "'${1}.conf' not found!" >&2
				shift
				continue
			fi
			source "${conf}"
			sg_delete_savegames "$NAME" "$SGNAME" "$SGROOT" "$SGDIR"
			shift
			
		done
		;;
	D)
		if [ $# -eq 0 ]; then
			echo "MISSING ARGUMENTS!" >&2
			sg_print_help
			exit 1
		fi
		while [ $# -gt 0 ]; do
			conf="${SG_CONF_DIR}/${1}.conf"
			if [ ! -f "${conf}" ]; then
				echo "'${1}.conf' not found!" >&2
				shift
				continue
			fi
			source "${conf}"
			sg_delete_backups "$NAME" "$SGNAME"
			shift
		done
		;;
	f)
		if [ $# -eq 0 ]; then
			echo "MISSING ARGUMENTS!" >&2
			sg_print_help
			exit 1
		fi
		echo "Backup started on ${sg_start_datetime}."
		while [ $# -gt 0 ]; do
			sg_final_backup "$1"
			shift
		done
		sg_runtime
		;;
	n)
		if [ $# -eq 0 ]; then
			echo "MISSING ARGUMENTS!" >&2
			sg_print_help
			exit 1
		fi
		while [ $# -gt 0 ]; do
			sg_print_name "$1"
			shift
		done
		;;
	r)
		if [ $# -eq 0 ]; then
			echo "MISSING ARGUMENTS!" >&2
			sg_print_help
			exit 1
		fi

		echo "Restoring savegames started on: ${sg_start_datetime}"
		while [ $# -gt 0 ]; do
			conf="${SG_CONF_DIR}/${1}.conf"
			if [ ! -f "${conf}" ]; then
				echo "'${1}.conf not found!" >&2
				shift
				continue
			fi
			source "$conf"
			sg_restore "$NAME" "$SGNAME" "$SGROOT"
			shift
		done
		sg_runtime
		;;
	R)
		echo "Restoring all savegames started on: ${sg_start_datetime}"
		for i in "${SG_CONF_DIR}"/*.conf; do
			source "${i}"
			sg_restore "$NAME" "$SGNAME" "$SGROOT"
		done
		sg_runtime
		exit
		;;
	*)
		echo "UNKNOWN BACKUP MODE!" >&2
		exit 1
		;;
esac

